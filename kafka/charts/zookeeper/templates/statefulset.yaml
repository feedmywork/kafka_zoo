apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ template "zookeeper.namespace" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: zookeeper
    role: zookeeper
    {{- if .Values.config_values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.config_values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.config_values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.config_values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ template "common.names.fullname" . }}-headless
  replicas: {{ .Values.config_values.replicaCount }}
  podManagementPolicy: {{ .Values.config_values.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.config_values.updateStrategy }}
    {{- if (eq "Recreate" .Values.config_values.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.config_values.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.config_values.rollingUpdatePartition }}
    {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: zookeeper
  template:
    metadata:
      name: {{ template "common.names.fullname" . }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: zookeeper
        {{- if .Values.config_values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.config_values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.config_values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.config_values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.config_values.schedulerName }}
      schedulerName: {{ .Values.config_values.schedulerName }}
      {{- end }}
      {{- include "zookeeper.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "zookeeper.serviceAccountName" . }}
      {{- if .Values.config_values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.config_values.securityContext.fsGroup }}
      {{- end }}
      {{- if .Values.config_values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.config_values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.config_values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.config_values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.config_values.podAffinityPreset "component" "zookeeper" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.config_values.podAntiAffinityPreset "component" "zookeeper" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.config_values.nodeAffinityPreset.type "key" .Values.config_values.nodeAffinityPreset.key "values" .Values.config_values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.config_values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.config_values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.config_values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.config_values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.config_values.priorityClassName }}
      priorityClassName: {{ .Values.config_values.priorityClassName }}
      {{- end }}
      {{- if or .Values.config_values.initContainers (and .Values.config_values.volumePermissions.enabled .Values.config_values.persistence.enabled) }}
      initContainers:
        {{- if .Values.config_values.initContainers }}
        {{ include "common.tplvalues.render" (dict "value" .Values.config_values.initContainers "context" $) | trim | nindent 8 }}
        {{- end }}
        {{- if and .Values.config_values.volumePermissions.enabled .Values.config_values.persistence.enabled }}
        - name: volume-permissions
          image: {{ template "zookeeper.volumePermissions.image" . }}
          imagePullPolicy: {{ default "" .Values.config_values.volumePermissions.image.pullPolicy | quote }}
          command:
            - chown
          args:
            - -R
            - {{ .Values.config_values.securityContext.runAsUser }}:{{ .Values.config_values.securityContext.fsGroup }}
            - /bitnami/zookeeper
            {{- if .Values.config_values.dataLogDir }}
            - {{ .Values.config_values.dataLogDir }}
            {{- end }}
          securityContext:
            runAsUser: 0
          {{- if .Values.config_values.volumePermissions.resources }}
          resources: {{- toYaml .Values.config_values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
            {{- if .Values.config_values.dataLogDir }}
            - name: data-log
              mountPath: {{ .Values.config_values.dataLogDir }}
            {{- end }}
        {{- end }}
      {{- end }}
      containers:
        - name: zookeeper
          image: {{ template "zookeeper.image" . }}
          imagePullPolicy: {{ .Values.config_values.image.pullPolicy | quote }}
          {{- if .Values.config_values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.config_values.securityContext.runAsUser }}
          {{- end }}
          command:
            - bash
            - -ec
            - |
                # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
                # check ZOO_SERVER_ID in persistent volume via myid
                # if not present, set based on POD hostname
                if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
                  export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
                else
                  HOSTNAME=`hostname -s`
                  if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                    ORD=${BASH_REMATCH[2]}
                    export ZOO_SERVER_ID=$((ORD + {{ .Values.config_values.minServerId }} ))
                  else
                    echo "Failed to get index from hostname $HOST"
                    exit 1
                  fi
                fi
                exec /entrypoint.sh /run.sh
          {{- if .Values.config_values.resources }}
          resources: {{- toYaml .Values.config_values.resources | nindent 12 }}
          {{- end }}
          env:
            - name: ZOO_DATA_LOG_DIR
              value: {{ .Values.config_values.dataLogDir | quote }}
            - name: ZOO_PORT_NUMBER
              value: {{ .Values.config_values.service.port | quote }}
            - name: ZOO_TICK_TIME
              value: {{ .Values.config_values.tickTime | quote }}
            - name: ZOO_INIT_LIMIT
              value: {{ .Values.config_values.initLimit | quote }}
            - name: ZOO_SYNC_LIMIT
              value: {{ .Values.config_values.syncLimit | quote }}
            - name: ZOO_MAX_CLIENT_CNXNS
              value: {{ .Values.config_values.maxClientCnxns | quote }}
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: {{ .Values.config_values.fourlwCommandsWhitelist | quote }}
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: {{ ternary "yes" "no" .Values.config_values.listenOnAllIPs | quote }}
            - name: ZOO_AUTOPURGE_INTERVAL
              value: {{ .Values.config_values.autopurge.purgeInterval | quote }}
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: {{ .Values.config_values.autopurge.snapRetainCount | quote }}
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: {{ .Values.config_values.maxSessionTimeout | quote }}
            - name: ZOO_SERVERS
              {{- $replicaCount := int .Values.config_values.replicaCount }}
              {{- $minServerId := int .Values.config_values.minServerId }}
              {{- $followerPort := int .Values.config_values.service.followerPort }}
              {{- $electionPort := int .Values.config_values.service.electionPort }}
              {{- $releaseNamespace := include "zookeeper.namespace" . }}
              {{- $zookeeperFullname := include "common.names.fullname" . }}
              {{- $zookeeperHeadlessServiceName := printf "%s-%s" $zookeeperFullname "headless" | trunc 63  }}
              {{- $clusterDomain := .Values.config_values.clusterDomain }}
              value: {{ range $i, $e := until $replicaCount }}{{ $zookeeperFullname }}-{{ $e }}.{{ $zookeeperHeadlessServiceName }}.{{ $releaseNamespace }}.svc.{{ $clusterDomain }}:{{ $followerPort }}:{{ $electionPort }}::{{ add $e $minServerId }} {{ end }}
            - name: ZOO_ENABLE_AUTH
              value: {{ ternary "yes" "no" .Values.config_values.auth.enabled | quote }}
            {{- if .Values.config_values.auth.enabled }}
            - name: ZOO_CLIENT_USER
              value: {{ .Values.config_values.auth.clientUser | quote }}
            - name: ZOO_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.config_values.auth.existingSecret }}{{ .Values.config_values.auth.existingSecret }}{{ else }}{{ template "common.names.fullname" . }}{{ end }}
                  key: client-password
            - name: ZOO_SERVER_USERS
              value: {{ .Values.config_values.auth.serverUsers | quote }}
            - name: ZOO_SERVER_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.config_values.auth.existingSecret }}{{ .Values.config_values.auth.existingSecret }}{{ else }}{{ template "common.names.fullname" . }}{{ end }}
                  key: server-password
            {{- end }}
            - name: ZOO_HEAP_SIZE
              value: {{ .Values.config_values.heapSize | quote }}
            - name: ZOO_LOG_LEVEL
              value: {{ .Values.config_values.logLevel | quote }}
            - name: ALLOW_ANONYMOUS_LOGIN
              value: {{ ternary "yes" "no" .Values.config_values.allowAnonymousLogin | quote }}
            {{- if .Values.config_values.jvmFlags }}
            - name: JVMFLAGS
              value: {{ .Values.config_values.jvmFlags | quote }}
            {{- end }}
            {{- if .Values.config_values.metrics.enabled }}
            - name: ZOO_ENABLE_PROMETHEUS_METRICS
              value: "yes"
            - name: ZOO_PROMETHEUS_METRICS_PORT_NUMBER
              value: {{ .Values.config_values.metrics.containerPort | quote }}
            {{- end }}
            {{- if .Values.config_values.service.tls.client_enable }}
            - name: ZOO_TLS_CLIENT_ENABLE
              value: {{ .Values.config_values.service.tls.client_enable | quote }}
            - name: ZOO_TLS_CLIENT_KEYSTORE_FILE
              value: {{ .Values.config_values.service.tls.client_keystore_path | quote }}
            - name: ZOO_TLS_CLIENT_KEYSTORE_PASSWORD
              value: {{ .Values.config_values.service.tls.client_keystore_password | quote }}
            - name: ZOO_TLS_CLIENT_TRUSTSTORE_FILE
              value: {{ .Values.config_values.service.tls.client_truststore_path | quote }}
            - name: ZOO_TLS_CLIENT_TRUSTSTORE_PASSWORD
              value: {{ .Values.config_values.service.tls.client_truststore_password | quote }}
            {{ end }}
            {{- if .Values.config_values.service.tls.quorum_enable }}
            - name: ZOO_TLS_QUORUM_ENABLE
              value: {{ .Values.config_values.service.tls.quorum_enable | quote }}
            - name: ZOO_TLS_QUORUM_KEYSTORE_FILE
              value: {{ .Values.config_values.service.tls.quorum_keystore_path | quote }}
            - name: ZOO_TLS_QUORUM_KEYSTORE_PASSWORD
              value: {{ .Values.config_values.service.tls.quorum_keystore_password | quote }}
            - name: ZOO_TLS_QUORUM_TRUSTSTORE_FILE
              value: {{ .Values.config_values.service.tls.quorum_truststore_path | quote }}
            - name: ZOO_TLS_QUORUM_TRUSTSTORE_PASSWORD
              value: {{ .Values.config_values.service.tls.quorum_truststore_password | quote }}
            {{ end }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            {{- if .Values.config_values.extraEnvVars }}
            {{- toYaml .Values.config_values.extraEnvVars | nindent 12 }}
            {{- end }}
          ports:
            {{ if not .Values.config_values.service.tls.disable_base_client_port }}
            - name: client
              containerPort: {{ .Values.config_values.service.port }}
            {{ end }}
            {{ if .Values.config_values.service.tls.client_enable }}
            - name: client-tls
              containerPort: {{ .Values.config_values.service.tls.client_port }}
            {{ end }}
            - name: follower
              containerPort: {{ .Values.config_values.service.followerPort }}
            - name: election
              containerPort: {{ .Values.config_values.service.electionPort }}
            {{- if .Values.config_values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.config_values.metrics.containerPort }}
            {{- end }}
          {{- if .Values.config_values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              {{- if not .Values.config_values.service.tls.disable_base_client_port }}
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout {{ .Values.config_values.livenessProbe.probeCommandTimeout }} nc -w {{ .Values.config_values.livenessProbe.probeCommandTimeout }} localhost {{ .Values.config_values.service.port }} | grep imok']
              {{- else }}
                {{- if not .Values.config_values.service.tls.client_enable }}
                command: ['/bin/bash', '-c', 'echo "ruok" | timeout {{ .Values.config_values.livenessProbe.probeCommandTimeout }} openssl s_client -quiet -crlf -connect localhost:{{ .Values.config_values.service.tls.client_port }} | grep imok']
                {{- else }}
                command: ['/bin/bash', '-c', 'echo "ruok" | timeout {{ .Values.config_values.livenessProbe.probeCommandTimeout }} openssl s_client -quiet -crlf -connect localhost:{{ .Values.config_values.service.tls.client_port }} -cert {{ .Values.config_values.service.tls.client_cert_pem_path }} -key {{ .Values.config_values.service.tls.client_key_pem_path }} | grep imok']
                {{- end }}
              {{- end }}
            initialDelaySeconds: {{ .Values.config_values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.config_values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.config_values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.config_values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.config_values.livenessProbe.failureThreshold }}
          {{- else if .Values.config_values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.config_values.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.config_values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              {{- if not .Values.config_values.service.tls.disable_base_client_port }}
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout {{ .Values.config_values.readinessProbe.probeCommandTimeout }} nc -w {{ .Values.config_values.readinessProbe.probeCommandTimeout }} localhost {{ .Values.config_values.service.port }} | grep imok']
              {{- else }}
                {{- if not .Values.config_values.service.tls.client_enable }}
                command: ['/bin/bash', '-c', 'echo "ruok" | timeout {{ .Values.config_values.livenessProbe.probeCommandTimeout }} openssl s_client -quiet -crlf -connect localhost:{{ .Values.config_values.service.tls.client_port }} | grep imok']
                {{- else }}
                command: ['/bin/bash', '-c', 'echo "ruok" | timeout {{ .Values.config_values.livenessProbe.probeCommandTimeout }} openssl s_client -quiet -crlf -connect localhost:{{ .Values.config_values.service.tls.client_port }} -cert {{ .Values.config_values.service.tls.client_cert_pem_path }} -key {{ .Values.config_values.service.tls.client_key_pem_path }} | grep imok']
                {{- end }}
              {{- end }}
            initialDelaySeconds: {{ .Values.config_values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.config_values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.config_values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.config_values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.config_values.readinessProbe.failureThreshold }}
          {{- else if .Values.config_values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.config_values.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
            {{- if .Values.config_values.dataLogDir }}
            - name: data-log
              mountPath: {{ .Values.config_values.dataLogDir }}
            {{- end }}
            {{- if .Values.config_values.config }}
            - name: config
              mountPath: /opt/bitnami/zookeeper/conf/zoo.cfg
              subPath: zoo.cfg
            {{- end }}
            {{- if .Values.config_values.extraVolumeMounts }}
            {{- toYaml .Values.config_values.extraVolumeMounts | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.config_values.config }}
        - name: config
          configMap:
            name: {{ template "common.names.fullname" . }}
        {{- end }}
        {{- if and .Values.config_values.persistence.enabled .Values.config_values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.config_values.persistence.existingClaim .) }}
        {{- else if not .Values.config_values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if and .Values.config_values.persistence.enabled .Values.config_values.persistence.dataLogDir.existingClaim }}
        - name: data-log
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.config_values.persistence.dataLogDir.existingClaim .) }}
        {{- else if and ( not .Values.config_values.persistence.enabled ) .Values.config_values.dataLogDir }}
        - name: data-log
          emptyDir: {}
        {{- end }}
        {{- if .Values.config_values.extraVolumes }}
        {{- toYaml .Values.config_values.extraVolumes | nindent 8 }}
        {{- end }}
  {{- if and .Values.config_values.persistence.enabled (not (and .Values.config_values.persistence.existingClaim .Values.config_values.persistence.dataLogDir.existingClaim) )}}
  volumeClaimTemplates:
    {{- if not .Values.config_values.persistence.existingClaim }}
    - metadata:
        name: data
        annotations:
        {{- range $key, $value := .Values.config_values.persistence.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.config_values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.config_values.persistence.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.config_values.persistence "global" .Values.config_values.global) | nindent 8 }}
    {{- end }}
    {{- if and (not .Values.config_values.persistence.dataLogDir.existingClaim) .Values.config_values.dataLogDir }}
    - metadata:
        name: data-log
        annotations:
        {{- range $key, $value := .Values.config_values.persistence.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.config_values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.config_values.persistence.dataLogDir.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.config_values.persistence "global" .Values.config_values.global) | nindent 8 }}
    {{- end }}
  {{- end }}
